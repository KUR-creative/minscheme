Terminals unused in grammar

   DISP


Grammar

    0 $accept: prog $end

    1 prog: pair

    2 expr: '(' pair ')'
    3     | '(' ')'
    4     | INTtok
    5     | FLOATtok
    6     | IDtok
    7     | DEFtok
    8     | BOOLtok
    9     | IFtok

   10 pair: expr
   11     | expr pair


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 3
')' (41) 2 3
error (256)
INTtok (258) 4
IDtok (259) 6
DISP (260)
DEFtok (261) 7
BOOLtok (262) 8
IFtok (263) 9
FLOATtok (264) 5


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
prog (13)
    on left: 1, on right: 0
expr (14)
    on left: 2 3 4 5 6 7 8 9, on right: 10 11
pair (15)
    on left: 10 11, on right: 1 2 11


State 0

    0 $accept: . prog $end

    INTtok    shift, and go to state 1
    IDtok     shift, and go to state 2
    DEFtok    shift, and go to state 3
    BOOLtok   shift, and go to state 4
    IFtok     shift, and go to state 5
    FLOATtok  shift, and go to state 6
    '('       shift, and go to state 7

    prog  go to state 8
    expr  go to state 9
    pair  go to state 10


State 1

    4 expr: INTtok .

    $default  reduce using rule 4 (expr)


State 2

    6 expr: IDtok .

    $default  reduce using rule 6 (expr)


State 3

    7 expr: DEFtok .

    $default  reduce using rule 7 (expr)


State 4

    8 expr: BOOLtok .

    $default  reduce using rule 8 (expr)


State 5

    9 expr: IFtok .

    $default  reduce using rule 9 (expr)


State 6

    5 expr: FLOATtok .

    $default  reduce using rule 5 (expr)


State 7

    2 expr: '(' . pair ')'
    3     | '(' . ')'

    INTtok    shift, and go to state 1
    IDtok     shift, and go to state 2
    DEFtok    shift, and go to state 3
    BOOLtok   shift, and go to state 4
    IFtok     shift, and go to state 5
    FLOATtok  shift, and go to state 6
    '('       shift, and go to state 7
    ')'       shift, and go to state 11

    expr  go to state 9
    pair  go to state 12


State 8

    0 $accept: prog . $end

    $end  shift, and go to state 13


State 9

   10 pair: expr .
   11     | expr . pair

    INTtok    shift, and go to state 1
    IDtok     shift, and go to state 2
    DEFtok    shift, and go to state 3
    BOOLtok   shift, and go to state 4
    IFtok     shift, and go to state 5
    FLOATtok  shift, and go to state 6
    '('       shift, and go to state 7

    $default  reduce using rule 10 (pair)

    expr  go to state 9
    pair  go to state 14


State 10

    1 prog: pair .

    $default  reduce using rule 1 (prog)


State 11

    3 expr: '(' ')' .

    $default  reduce using rule 3 (expr)


State 12

    2 expr: '(' pair . ')'

    ')'  shift, and go to state 15


State 13

    0 $accept: prog $end .

    $default  accept


State 14

   11 pair: expr pair .

    $default  reduce using rule 11 (pair)


State 15

    2 expr: '(' pair ')' .

    $default  reduce using rule 2 (expr)
