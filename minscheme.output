Terminals unused in grammar

   BOOL


Grammar

    0 $accept: prog $end

    1 prog: pair

    2 expr: '(' pair ')'
    3     | INTEGER
    4     | IDENTIFIER
    5     | DISP
    6     | DEFINE

    7 pair: expr
    8     | expr pair


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2
')' (41) 2
error (256)
INTEGER (258) 3
IDENTIFIER (259) 4
DISP (260) 5
DEFINE (261) 6
BOOL (262)


Nonterminals, with rules where they appear

$accept (10)
    on left: 0
prog (11)
    on left: 1, on right: 0
expr (12)
    on left: 2 3 4 5 6, on right: 7 8
pair (13)
    on left: 7 8, on right: 1 2 8


State 0

    0 $accept: . prog $end

    INTEGER     shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    DISP        shift, and go to state 3
    DEFINE      shift, and go to state 4
    '('         shift, and go to state 5

    prog  go to state 6
    expr  go to state 7
    pair  go to state 8


State 1

    3 expr: INTEGER .

    $default  reduce using rule 3 (expr)


State 2

    4 expr: IDENTIFIER .

    $default  reduce using rule 4 (expr)


State 3

    5 expr: DISP .

    $default  reduce using rule 5 (expr)


State 4

    6 expr: DEFINE .

    $default  reduce using rule 6 (expr)


State 5

    2 expr: '(' . pair ')'

    INTEGER     shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    DISP        shift, and go to state 3
    DEFINE      shift, and go to state 4
    '('         shift, and go to state 5

    expr  go to state 7
    pair  go to state 9


State 6

    0 $accept: prog . $end

    $end  shift, and go to state 10


State 7

    7 pair: expr .
    8     | expr . pair

    INTEGER     shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    DISP        shift, and go to state 3
    DEFINE      shift, and go to state 4
    '('         shift, and go to state 5

    $default  reduce using rule 7 (pair)

    expr  go to state 7
    pair  go to state 11


State 8

    1 prog: pair .

    $default  reduce using rule 1 (prog)


State 9

    2 expr: '(' pair . ')'

    ')'  shift, and go to state 12


State 10

    0 $accept: prog $end .

    $default  accept


State 11

    8 pair: expr pair .

    $default  reduce using rule 8 (pair)


State 12

    2 expr: '(' pair ')' .

    $default  reduce using rule 2 (expr)
