Terminals unused in grammar

   DISP
   FLOATtok


Grammar

    0 $accept: prog $end

    1 prog: pair

    2 expr: '(' pair ')'
    3     | INTtok
    4     | IDtok
    5     | DEFtok
    6     | BOOLtok
    7     | IFtok

    8 pair: expr
    9     | expr pair


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2
')' (41) 2
error (256)
INTtok (258) 3
IDtok (259) 4
DISP (260)
DEFtok (261) 5
BOOLtok (262) 6
IFtok (263) 7
FLOATtok (264)


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
prog (13)
    on left: 1, on right: 0
expr (14)
    on left: 2 3 4 5 6 7, on right: 8 9
pair (15)
    on left: 8 9, on right: 1 2 9


State 0

    0 $accept: . prog $end

    INTtok   shift, and go to state 1
    IDtok    shift, and go to state 2
    DEFtok   shift, and go to state 3
    BOOLtok  shift, and go to state 4
    IFtok    shift, and go to state 5
    '('      shift, and go to state 6

    prog  go to state 7
    expr  go to state 8
    pair  go to state 9


State 1

    3 expr: INTtok .

    $default  reduce using rule 3 (expr)


State 2

    4 expr: IDtok .

    $default  reduce using rule 4 (expr)


State 3

    5 expr: DEFtok .

    $default  reduce using rule 5 (expr)


State 4

    6 expr: BOOLtok .

    $default  reduce using rule 6 (expr)


State 5

    7 expr: IFtok .

    $default  reduce using rule 7 (expr)


State 6

    2 expr: '(' . pair ')'

    INTtok   shift, and go to state 1
    IDtok    shift, and go to state 2
    DEFtok   shift, and go to state 3
    BOOLtok  shift, and go to state 4
    IFtok    shift, and go to state 5
    '('      shift, and go to state 6

    expr  go to state 8
    pair  go to state 10


State 7

    0 $accept: prog . $end

    $end  shift, and go to state 11


State 8

    8 pair: expr .
    9     | expr . pair

    INTtok   shift, and go to state 1
    IDtok    shift, and go to state 2
    DEFtok   shift, and go to state 3
    BOOLtok  shift, and go to state 4
    IFtok    shift, and go to state 5
    '('      shift, and go to state 6

    $default  reduce using rule 8 (pair)

    expr  go to state 8
    pair  go to state 12


State 9

    1 prog: pair .

    $default  reduce using rule 1 (prog)


State 10

    2 expr: '(' pair . ')'

    ')'  shift, and go to state 13


State 11

    0 $accept: prog $end .

    $default  accept


State 12

    9 pair: expr pair .

    $default  reduce using rule 9 (pair)


State 13

    2 expr: '(' pair ')' .

    $default  reduce using rule 2 (expr)
