Terminals unused in grammar

   DISP


Grammar

    0 $accept: prog $end

    1 prog: pair

    2 expr: '(' pair ')'
    3     | INTtok
    4     | FLOATtok
    5     | IDtok
    6     | DEFtok
    7     | BOOLtok
    8     | IFtok

    9 pair: expr
   10     | expr pair


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2
')' (41) 2
error (256)
INTtok (258) 3
IDtok (259) 5
DISP (260)
DEFtok (261) 6
BOOLtok (262) 7
IFtok (263) 8
FLOATtok (264) 4


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
prog (13)
    on left: 1, on right: 0
expr (14)
    on left: 2 3 4 5 6 7 8, on right: 9 10
pair (15)
    on left: 9 10, on right: 1 2 10


State 0

    0 $accept: . prog $end

    INTtok    shift, and go to state 1
    IDtok     shift, and go to state 2
    DEFtok    shift, and go to state 3
    BOOLtok   shift, and go to state 4
    IFtok     shift, and go to state 5
    FLOATtok  shift, and go to state 6
    '('       shift, and go to state 7

    prog  go to state 8
    expr  go to state 9
    pair  go to state 10


State 1

    3 expr: INTtok .

    $default  reduce using rule 3 (expr)


State 2

    5 expr: IDtok .

    $default  reduce using rule 5 (expr)


State 3

    6 expr: DEFtok .

    $default  reduce using rule 6 (expr)


State 4

    7 expr: BOOLtok .

    $default  reduce using rule 7 (expr)


State 5

    8 expr: IFtok .

    $default  reduce using rule 8 (expr)


State 6

    4 expr: FLOATtok .

    $default  reduce using rule 4 (expr)


State 7

    2 expr: '(' . pair ')'

    INTtok    shift, and go to state 1
    IDtok     shift, and go to state 2
    DEFtok    shift, and go to state 3
    BOOLtok   shift, and go to state 4
    IFtok     shift, and go to state 5
    FLOATtok  shift, and go to state 6
    '('       shift, and go to state 7

    expr  go to state 9
    pair  go to state 11


State 8

    0 $accept: prog . $end

    $end  shift, and go to state 12


State 9

    9 pair: expr .
   10     | expr . pair

    INTtok    shift, and go to state 1
    IDtok     shift, and go to state 2
    DEFtok    shift, and go to state 3
    BOOLtok   shift, and go to state 4
    IFtok     shift, and go to state 5
    FLOATtok  shift, and go to state 6
    '('       shift, and go to state 7

    $default  reduce using rule 9 (pair)

    expr  go to state 9
    pair  go to state 13


State 10

    1 prog: pair .

    $default  reduce using rule 1 (prog)


State 11

    2 expr: '(' pair . ')'

    ')'  shift, and go to state 14


State 12

    0 $accept: prog $end .

    $default  accept


State 13

   10 pair: expr pair .

    $default  reduce using rule 10 (pair)


State 14

    2 expr: '(' pair ')' .

    $default  reduce using rule 2 (expr)
